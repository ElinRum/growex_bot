from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from utils.validations import is_valid_email, is_valid_phone
from utils.counter import increment_lead
from templates.messages import *
from config import BOT_TOKEN, MANAGER_CHAT_ID
from aiogram import Bot

class ContactStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_contact = State()
    waiting_for_company = State()

async def start_contact_collection(message: types.Message, calc_data: dict):
    """–ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    state = Dispatcher.get_current().current_state()
    await ContactStates.waiting_for_name.set()
    await state.update_data(calc_data=calc_data)
    
    await message.answer(NAME_REQUEST_TEXT, reply_markup=get_contact_keyboard())

async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    name = message.text.strip()
    if len(name) < 2:
        await message.answer(INVALID_NAME_TEXT)
        return
    
    await state.update_data(name=name)
    await ContactStates.waiting_for_contact.set()
    await message.answer(CONTACT_REQUEST_TEXT)

async def process_contact(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email)"""
    contact = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –∏–ª–∏ email
    if contact.startswith("+") and is_valid_phone(contact):
        contact_type = "phone"
    elif "@" in contact and is_valid_email(contact):
        contact_type = "email"
    else:
        await message.answer(INVALID_CONTACT_TEXT)
        return
    
    await state.update_data(contact=contact, contact_type=contact_type)
    await ContactStates.waiting_for_company.set()
    await message.answer(COMPANY_REQUEST_TEXT, reply_markup=get_skip_keyboard())

async def process_company(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏"""
    company = message.text.strip()
    
    if company == "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        company = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    elif len(company) < 2:
        await message.answer(INVALID_COMPANY_TEXT)
        return
    
    await state.update_data(company=company)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
    user_data = await state.get_data()
    await send_lead_to_manager(message, user_data)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∏–¥–æ–≤
    increment_lead()
    
    await state.finish()
    await message.answer(LEAD_SUCCESS_TEXT, reply_markup=get_main_keyboard())

async def skip_company(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏"""
    await state.update_data(company="–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
    user_data = await state.get_data()
    await send_lead_to_manager(message, user_data)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∏–¥–æ–≤
    increment_lead()
    
    await state.finish()
    await message.answer(LEAD_SUCCESS_TEXT, reply_markup=get_main_keyboard())

async def send_lead_to_manager(message: types.Message, user_data: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É"""
    bot = Bot.get_current()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    calc_data = user_data.get("calc_data", {})
    
    lead_text = f"""
üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –¢—É—Ä—Ü–∏–∏</b>

üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –ò–º—è: {user_data.get('name')}
‚Ä¢ {user_data.get('contact_type', '–ö–æ–Ω—Ç–∞–∫—Ç').capitalize()}: {user_data.get('contact')}
‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: {user_data.get('company')}

üì¶ <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞:</b>
"""
    
    if calc_data.get("flow_type") == "description":
        lead_text += f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {calc_data.get('description')}\n"
    else:
        if calc_data.get("volume"):
            lead_text += f"‚Ä¢ –û–±—ä—ë–º: {calc_data.get('volume')} –º¬≥\n"
        if calc_data.get("weight"):
            lead_text += f"‚Ä¢ –í–µ—Å: {calc_data.get('weight')} –∫–≥\n"
    
    lead_text += f"‚Ä¢ –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: {calc_data.get('city')}\n"
    
    lead_text += f"""
üë§ <b>Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>
‚Ä¢ ID: {message.from_user.id}
‚Ä¢ Username: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –ò–º—è –≤ Telegram: {message.from_user.full_name}
"""
    
    try:
        await bot.send_message(MANAGER_CHAT_ID, lead_text, parse_mode="HTML")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")

def get_contact_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    return keyboard

def get_skip_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
        types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥")
    )
    return keyboard

def get_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*[types.KeyboardButton(btn) for btn in ["–£–∫–∞–∑–∞—Ç—å –æ–±—ä—ë–º –∏ –≤–µ—Å", "–¢–æ–ª—å–∫–æ –æ–±—ä—ë–º", "–¢–æ–ª—å–∫–æ –≤–µ—Å", "–ù–µ –∑–Ω–∞—é ‚Äî –æ–ø–∏—à—É"]])
    return keyboard

async def back_to_calc(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–∞—Å—á–µ—Ç—É"""
    await state.finish()
    from handlers.start import cmd_start
    await cmd_start(message)

def register_handlers(dp: Dispatcher):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.register_message_handler(process_name, state=ContactStates.waiting_for_name)
    dp.register_message_handler(process_contact, state=ContactStates.waiting_for_contact)
    dp.register_message_handler(process_company, state=ContactStates.waiting_for_company)
    dp.register_message_handler(skip_company, text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", state=ContactStates.waiting_for_company)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    dp.register_message_handler(back_to_calc, text="‚óÄÔ∏è –ù–∞–∑–∞–¥", state=[ContactStates.waiting_for_name, ContactStates.waiting_for_contact, ContactStates.waiting_for_company])
