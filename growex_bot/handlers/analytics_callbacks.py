"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery
from config import is_admin
from utils.logger import bot_logger
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(F.data.startswith("analytics_"))
async def handle_analytics_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∫–æ–º–ø–∞–Ω–∏–∏.", show_alert=True)
        return
    
    try:
        period = callback.data.split("_")[1]  # analytics_weekly -> weekly
        
        if period == "incomplete":
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
            stats = bot_logger.get_incomplete_calculations_stats()
            
            response = "üìä <b>–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã</b>\n\n"
            
            for period_name, period_data in stats.items():
                period_display = {
                    "weekly": "üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é",
                    "monthly": "üìÖ –ó–∞ –º–µ—Å—è—Ü", 
                    "quarterly": "üìÖ –ó–∞ 3 –º–µ—Å—è—Ü–∞",
                    "all_time": "üìÖ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è"
                }.get(period_name, period_name)
                
                total = period_data.get("total", 0)
                by_step = period_data.get("by_step", {})
                
                response += f"{period_display}: <b>{total}</b>\n"
                
                if by_step:
                    for step, count in by_step.items():
                        step_display = {
                            "volume_weight": "üì¶ –í–≤–æ–¥ –æ–±—ä–µ–º–∞/–≤–µ—Å–∞",
                            "city_selection": "üèô –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞",
                            "rate_calculation": "üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–∞–≤–∫–∏",
                            "contact_collection": "üìû –°–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"
                        }.get(step, step)
                        response += f"  ‚Ä¢ {step_display}: {count}\n"
                
                response += "\n"
            
        else:
            # –û–±—ã—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            analytics = bot_logger.get_analytics(period)
            
            period_display = {
                "weekly": "üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é",
                "monthly": "üìÖ –ó–∞ –º–µ—Å—è—Ü",
                "quarterly": "üìÖ –ó–∞ 3 –º–µ—Å—è—Ü–∞", 
                "all_time": "üìÖ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è"
            }.get(period, period)
            
            response = f"üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ {period_display}</b>\n\n"
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            total_calculations = analytics.get("total_calculations", 0)
            total_requests = analytics.get("total_requests", 0)
            avg_volume = analytics.get("average_volume", 0)
            
            response += f"üî¢ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            response += f"‚Ä¢ –†–∞—Å—á–µ—Ç–æ–≤: {total_calculations}\n"
            response += f"‚Ä¢ –ó–∞—è–≤–æ–∫: {total_requests}\n"
            response += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: {avg_volume:.1f} –º¬≥\n\n"
            
            # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
            popular_cities = analytics.get("popular_cities", {})
            if popular_cities:
                response += f"üèô <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:</b>\n"
                sorted_cities = sorted(popular_cities.items(), key=lambda x: x[1], reverse=True)
                for city, count in sorted_cities[:5]:
                    response += f"‚Ä¢ {city}: {count}\n"
                response += "\n"
            
            # –¢–∏–ø—ã –≥—Ä—É–∑–æ–≤
            cargo_types = analytics.get("cargo_types", {})
            if cargo_types:
                response += f"üì¶ <b>–¢–∏–ø—ã –≥—Ä—É–∑–æ–≤:</b>\n"
                sorted_cargo = sorted(cargo_types.items(), key=lambda x: x[1], reverse=True)
                for cargo, count in sorted_cargo[:5]:
                    response += f"‚Ä¢ {cargo}: {count}\n"
                response += "\n"
            
            if not analytics:
                response += "üì≠ –î–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –ø–æ–∫–∞ –Ω–µ—Ç"
        
        await callback.message.edit_text(response, parse_mode='HTML')
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", show_alert=True)

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router) 