from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from utils.tariffs import calculate_cost, get_city_coefficient
from utils.counter import increment_calculation
from templates.messages import *
import re

class CalcStates(StatesGroup):
    waiting_for_volume = State()
    waiting_for_weight = State()
    waiting_for_city = State()
    waiting_for_description = State()
    showing_result = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å—á–µ—Ç–∞
async def volume_and_weight_flow(message: types.Message, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–£–∫–∞–∑–∞—Ç—å –æ–±—ä—ë–º –∏ –≤–µ—Å'"""
    await CalcStates.waiting_for_volume.set()
    await state.update_data(flow_type="volume_and_weight")
    await message.answer(VOLUME_REQUEST_TEXT, reply_markup=get_back_keyboard())

async def volume_only_flow(message: types.Message, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–¢–æ–ª—å–∫–æ –æ–±—ä—ë–º'"""
    await CalcStates.waiting_for_volume.set()
    await state.update_data(flow_type="volume_only")
    await message.answer(VOLUME_REQUEST_TEXT, reply_markup=get_back_keyboard())

async def weight_only_flow(message: types.Message, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–¢–æ–ª—å–∫–æ –≤–µ—Å'"""
    await CalcStates.waiting_for_weight.set()
    await state.update_data(flow_type="weight_only")
    await message.answer(WEIGHT_REQUEST_TEXT, reply_markup=get_back_keyboard())

async def description_flow(message: types.Message, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª '–ù–µ –∑–Ω–∞—é ‚Äî –æ–ø–∏—à—É'"""
    await CalcStates.waiting_for_description.set()
    await state.update_data(flow_type="description")
    await message.answer(DESCRIPTION_REQUEST_TEXT, reply_markup=get_back_keyboard())

async def process_volume(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–º–∞"""
    try:
        volume = float(message.text.replace(",", "."))
        if volume <= 0:
            await message.answer(INVALID_VOLUME_TEXT)
            return
        
        await state.update_data(volume=volume)
        user_data = await state.get_data()
        
        if user_data["flow_type"] == "volume_and_weight":
            await CalcStates.waiting_for_weight.set()
            await message.answer(WEIGHT_REQUEST_TEXT)
        else:
            # –¢–æ–ª—å–∫–æ –æ–±—ä—ë–º - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–æ—Ä–æ–¥—É
            await CalcStates.waiting_for_city.set()
            await message.answer(CITY_REQUEST_TEXT)
            
    except ValueError:
        await message.answer(INVALID_VOLUME_TEXT)

async def process_weight(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤–µ—Å–∞"""
    try:
        weight = float(message.text.replace(",", "."))
        if weight <= 0:
            await message.answer(INVALID_WEIGHT_TEXT)
            return
        
        await state.update_data(weight=weight)
        await CalcStates.waiting_for_city.set()
        await message.answer(CITY_REQUEST_TEXT)
        
    except ValueError:
        await message.answer(INVALID_WEIGHT_TEXT)

async def process_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–∑–∞"""
    description = message.text.strip()
    if len(description) < 10:
        await message.answer(INVALID_DESCRIPTION_TEXT)
        return
    
    await state.update_data(description=description)
    await CalcStates.waiting_for_city.set()
    await message.answer(CITY_REQUEST_TEXT)

async def process_city(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    city = message.text.strip()
    if len(city) < 2:
        await message.answer(INVALID_CITY_TEXT)
        return
    
    await state.update_data(city=city)
    user_data = await state.get_data()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    try:
        if user_data["flow_type"] == "description":
            # –î–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            result_text = DESCRIPTION_RESULT_TEXT.format(
                description=user_data.get("description", ""),
                city=city
            )
        else:
            # –†–∞—Å—á–µ—Ç –ø–æ –æ–±—ä–µ–º—É/–≤–µ—Å—É
            cost = calculate_cost(
                volume=user_data.get("volume"),
                weight=user_data.get("weight"),
                city=city
            )
            
            result_text = CALCULATION_RESULT_TEXT.format(
                volume=user_data.get("volume", "-"),
                weight=user_data.get("weight", "-"),
                city=city,
                cost=cost
            )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–∞—Å—á–µ—Ç–æ–≤
        increment_calculation()
        
        await CalcStates.showing_result.set()
        await message.answer(result_text, reply_markup=get_result_keyboard())
        
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {str(e)}")
        await state.finish()

async def new_calculation(message: types.Message, state: FSMContext):
    """–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç"""
    await state.finish()
    from handlers.start import cmd_start
    await cmd_start(message)

async def get_contacts_handler(message: types.Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–±–æ—Ä—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è contact_collection
    user_data = await state.get_data()
    await state.finish()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    from handlers.contact_collection import start_contact_collection
    await start_contact_collection(message, user_data)

async def back_to_start(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—É"""
    await state.finish()
    from handlers.start import cmd_start
    await cmd_start(message)

def get_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    return keyboard

def get_result_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row(
        types.KeyboardButton("üí∞ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É"),
        types.KeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")
    )
    return keyboard

def register_handlers(dp: Dispatcher):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—á–µ—Ç–∞
    dp.register_message_handler(volume_and_weight_flow, text="–£–∫–∞–∑–∞—Ç—å –æ–±—ä—ë–º –∏ –≤–µ—Å")
    dp.register_message_handler(volume_only_flow, text="–¢–æ–ª—å–∫–æ –æ–±—ä—ë–º")
    dp.register_message_handler(weight_only_flow, text="–¢–æ–ª—å–∫–æ –≤–µ—Å")
    dp.register_message_handler(description_flow, text="–ù–µ –∑–Ω–∞—é ‚Äî –æ–ø–∏—à—É")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.register_message_handler(process_volume, state=CalcStates.waiting_for_volume)
    dp.register_message_handler(process_weight, state=CalcStates.waiting_for_weight)
    dp.register_message_handler(process_description, state=CalcStates.waiting_for_description)
    dp.register_message_handler(process_city, state=CalcStates.waiting_for_city)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    dp.register_message_handler(get_contacts_handler, text="üí∞ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É", state=CalcStates.showing_result)
    dp.register_message_handler(new_calculation, text="üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç", state=CalcStates.showing_result)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    dp.register_message_handler(back_to_start, text="‚óÄÔ∏è –ù–∞–∑–∞–¥", state="*")
