"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
"""

from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from config import is_admin
from utils.tariffs import tariff_manager, get_available_cities
from utils.logger import bot_logger
from utils.validations import check_spam_protection, get_validation_error_message
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("rates"))
async def cmd_rates(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∫–æ–º–ø–∞–Ω–∏–∏.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
    allowed, remaining = check_spam_protection(message.from_user.id)
    if not allowed:
        await message.answer(get_validation_error_message("spam", ""))
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:]  # –£–±–∏—Ä–∞–µ–º /rates
        
        if len(args) < 2:
            await message.answer(
                "üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /rates</b>\n\n"
                "–§–æ—Ä–º–∞—Ç: <code>/rates [–≥–æ—Ä–æ–¥] [–æ–±—ä–µ–º]</code>\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/rates –ú–æ—Å–∫–≤–∞ 2</code>\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:\n" + 
                "\n".join([f"‚Ä¢ {city}" for city in get_available_cities()[:10]]),
                parse_mode='HTML'
            )
            return
        
        city = args[0]
        try:
            volume = int(args[1])
            weight = 500  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–µ—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        except ValueError:
            await message.answer("‚ùå –û–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
        rate, calc_type, details = tariff_manager.calculate_rate(volume, weight, city)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if calc_type == "composite":
            response = f"üí∞ <b>–†–∞—Å—á–µ—Ç —Ç–∞—Ä–∏—Ñ–∞</b>\n\n" \
                      f"üèô –ì–æ—Ä–æ–¥: {details['city']}\n" \
                      f"üì¶ –û–±—ä–µ–º: {details['volume']} –º¬≥\n" \
                      f"‚öñÔ∏è –í–µ—Å: {details['weight']} –∫–≥\n" \
                      f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{rate} {details['currency']}</b>\n\n" \
                      f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {details['valid_until']}"
        else:
            response = f"üí∞ <b>–†–∞—Å—á–µ—Ç —Ç–∞—Ä–∏—Ñ–∞</b>\n\n" \
                      f"üèô –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥: {details['original_city']}\n" \
                      f"üìç –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ: {details['city']}\n" \
                      f"üì¶ –û–±—ä–µ–º: {details['volume']} –º¬≥\n" \
                      f"‚öñÔ∏è –í–µ—Å: {details['weight']} –∫–≥\n" \
                      f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{rate} {details['currency']}</b>\n\n" \
                      f"‚ÑπÔ∏è {details['note']}\n" \
                      f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {details['valid_until']}"
        
        await message.answer(response, parse_mode='HTML')
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç
        bot_logger.log_calculation(
            user_id=message.from_user.id,
            username=message.from_user.username or "Unknown",
            calculation_data={
                "city": city,
                "volume": volume,
                "weight": weight,
                "rate": rate,
                "calc_type": calc_type
            },
            step="completed"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("last_requests"))
async def cmd_last_requests(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∫–æ–º–ø–∞–Ω–∏–∏.")
        return
    
    try:
        requests = bot_logger.get_last_requests(5)
        
        if not requests:
            await message.answer("üìã –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
            return
        
        response = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫:</b>\n\n"
        
        for i, req in enumerate(reversed(requests), 1):
            data = req.get("data", {})
            timestamp = req.get("timestamp", "")[:16]  # –£–±–∏—Ä–∞–µ–º —Å–µ–∫—É–Ω–¥—ã
            
            response += f"<b>{i}. –ó–∞—è–≤–∫–∞ {req.get('request_id', 'N/A')}</b>\n" \
                       f"üìÖ {timestamp}\n" \
                       f"üë§ {data.get('name', 'N/A')}\n" \
                       f"üìû {data.get('phone_display', data.get('phone', 'N/A'))}\n" \
                       f"üèô {data.get('city', 'N/A')}\n" \
                       f"üì¶ {data.get('volume', 'N/A')} –º¬≥, {data.get('weight', 'N/A')} –∫–≥\n" \
                       f"üí∞ {data.get('rate', 'N/A')} USD\n\n"
        
        await message.answer(response, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫")

@router.message(Command("last_uploads"))
async def cmd_last_uploads(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∫–æ–º–ø–∞–Ω–∏–∏.")
        return
    
    try:
        uploads = bot_logger.get_last_uploads(3)
        
        if not uploads:
            await message.answer("üìÅ –ó–∞–≥—Ä—É–∑–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
            return
        
        response = "üìÅ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤:</b>\n\n"
        
        for i, upload in enumerate(reversed(uploads), 1):
            data = upload.get("data", {})
            timestamp = upload.get("timestamp", "")[:16]
            username = upload.get("username", "Unknown")
            
            response += f"<b>{i}. {data.get('filename', 'N/A')}</b>\n" \
                       f"üìÖ {timestamp}\n" \
                       f"üë§ @{username}\n" \
                       f"‚úÖ {data.get('status', 'N/A')}\n" \
                       f"üìù {data.get('details', 'N/A')}\n\n"
        
        await message.answer(response, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–æ–∫: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫")

@router.message(Command("analytics"))
async def cmd_analytics(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∫–æ–º–ø–∞–Ω–∏–∏.")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÖ –ù–µ–¥–µ–ª—è", callback_data="analytics_weekly"),
                InlineKeyboardButton(text="üìÖ –ú–µ—Å—è—Ü", callback_data="analytics_monthly")
            ],
            [
                InlineKeyboardButton(text="üìÖ 3 –º–µ—Å—è—Ü–∞", callback_data="analytics_quarterly"),
                InlineKeyboardButton(text="üìÖ –í—Å–µ –≤—Ä–µ–º—è", callback_data="analytics_all_time")
            ],
            [
                InlineKeyboardButton(text="üìä –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data="analytics_incomplete")
            ]
        ])
        
        await message.answer(
            "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")

@router.message(Command("info"))
async def cmd_info(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –∫–æ–º–ø–∞–Ω–∏–∏.")
        return
    
    help_text = """
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</b>

üîß <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/rates [–≥–æ—Ä–æ–¥] [–æ–±—ä–µ–º]</code> - —Ä–∞—Å—á–µ—Ç —Ç–∞—Ä–∏—Ñ–∞
‚Ä¢ <code>/last_requests</code> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫
‚Ä¢ <code>/last_uploads</code> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤
‚Ä¢ <code>/analytics</code> - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ <code>/info</code> - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üìÅ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º:
‚Ä¢ "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å—Ç–∞–≤–∫–∞.xlsx" - –¥–ª—è –≥–æ—Ä–æ–¥—Å–∫–∏—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
‚Ä¢ "–î–æ –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫–∞.xlsx" - –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–æ –°–í–•

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
‚Ä¢ –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø
‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è

üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:</b>
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏ –∑–∞—è–≤–æ–∫
‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏ —Ç–∏–ø—ã –≥—Ä—É–∑–æ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
"""
    
    await message.answer(help_text, parse_mode='HTML')

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router) 