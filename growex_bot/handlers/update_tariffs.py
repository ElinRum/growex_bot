"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
"""

import os
import tempfile
from aiogram import Router, F
from aiogram.types import Message, Document
from config import is_admin
from utils.tariffs import tariff_manager
from utils.excel_parser import ExcelParser
from utils.logger import bot_logger
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.message(F.document)
async def handle_document_upload(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (Excel —Ñ–∞–π–ª–æ–≤ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–∞—Ä–∏—Ñ—ã")
        return
    
    document: Document = message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Excel —Ñ–∞–π–ª
    if not document.file_name.endswith('.xlsx'):
        await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞ .xlsx")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
    if document.file_size > 10 * 1024 * 1024:
        await message.answer("‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB")
        return
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        excel_parser = ExcelParser()
        file_type = excel_parser.get_file_type_by_name(document.file_name)
        
        if not file_type:
            await message.answer(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.\n\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã:\n"
                "‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å—Ç–∞–≤–∫–∞.xlsx\n"
                "‚Ä¢ –î–æ –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫–∞.xlsx"
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        with tempfile.NamedTemporaryFile(suffix='.xlsx', delete=False) as temp_file:
            await message.bot.download(document, temp_file.name)
            temp_file_path = temp_file.name
        
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
            is_valid, error_msg = excel_parser.validate_excel_file(temp_file_path, file_type)
            if not is_valid:
                await processing_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞:\n{error_msg}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
                bot_logger.log_upload(
                    user_id=message.from_user.id,
                    username=message.from_user.username or "Unknown",
                    upload_data={
                        "filename": document.file_name,
                        "status": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                        "details": error_msg
                    }
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞—Ä–∏—Ñ—ã
            if file_type == "composite":
                result = tariff_manager.update_composite_rates(temp_file_path)
                tariff_type = "–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤"
            else:
                result = tariff_manager.update_novorossiysk_rates(temp_file_path)
                tariff_type = "—Ç–∞—Ä–∏—Ñ–æ–≤ –¥–æ –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫–∞"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            cities_count = len(result.get("rates", {}))
            valid_until = result.get("valid_until", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            
            success_message = f"‚úÖ <b>–¢–∞—Ä–∏—Ñ—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>\n\n" \
                            f"üìÅ –§–∞–π–ª: {document.file_name}\n" \
                            f"üìä –¢–∏–ø: {tariff_type}\n" \
                            f"üèô –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {cities_count}\n" \
                            f"üìÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã –¥–æ: {valid_until}\n" \
                            f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {result.get('last_update', '')[:16]}"
            
            if file_type == "composite":
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
                cities = list(result.get("rates", {}).keys())
                if cities:
                    cities_text = ", ".join(cities[:5])
                    if len(cities) > 5:
                        cities_text += f" –∏ –µ—â–µ {len(cities) - 5}"
                    success_message += f"\nüåç –ì–æ—Ä–æ–¥–∞: {cities_text}"
            
            await processing_msg.edit_text(success_message, parse_mode='HTML')
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
            bot_logger.log_upload(
                user_id=message.from_user.id,
                username=message.from_user.username or "Unknown",
                upload_data={
                    "filename": document.file_name,
                    "status": "–£—Å–ø–µ—à–Ω–æ",
                    "details": f"–û–±–Ω–æ–≤–ª–µ–Ω—ã {tariff_type}, –∑–∞–ø–∏—Å–µ–π: {cities_count}",
                    "valid_until": valid_until,
                    "file_type": file_type
                }
            )
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.unlink(temp_file_path)
            except:
                pass
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {document.file_name}: {e}")
        
        error_message = f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞</b>\n\n" \
                       f"üìÅ –§–∞–π–ª: {document.file_name}\n" \
                       f"‚ùó –û—à–∏–±–∫–∞: {str(e)}\n\n" \
                       f"üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n" \
                       f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞\n" \
                       f"‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n" \
                       f"‚Ä¢ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω\n\n" \
                       f"üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"
        
        try:
            await processing_msg.edit_text(error_message, parse_mode='HTML')
        except:
            await message.answer(error_message, parse_mode='HTML')
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
        bot_logger.log_upload(
            user_id=message.from_user.id,
            username=message.from_user.username or "Unknown",
            upload_data={
                "filename": document.file_name,
                "status": "–û—à–∏–±–∫–∞",
                "details": str(e)
            }
        )

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router) 