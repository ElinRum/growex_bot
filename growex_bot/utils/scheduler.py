"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ä–æ–∫–∞—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
"""

import schedule
import time
import threading
import logging
from datetime import datetime, timedelta
from typing import Optional
from .tariffs import tariff_manager
from config import TARIFF_WARNING_DAYS, MANAGER_CHAT_ID

logger = logging.getLogger(__name__)

class TariffScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤"""
    
    def __init__(self, bot=None):
        self.bot = bot
        self.running = False
        self.thread: Optional[threading.Thread] = None
        self.last_notification_date = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
    def start(self, bot):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.bot = bot
        if not self.running:
            self.running = True
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
            schedule.every().day.at("10:00").do(self._check_tariff_expiry)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.thread = threading.Thread(target=self._run_scheduler, daemon=True)
            self.thread.start()
            
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        schedule.clear()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.running:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(300)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç
    
    def _check_tariff_expiry(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤"""
        try:
            if not self.bot:
                return
            
            expiry_info = tariff_manager.check_tariff_expiry()
            today = datetime.now().date()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
            composite_info = expiry_info.get("composite", {})
            if composite_info.get("valid_until"):
                days_left = composite_info.get("days_left", 0)
                
                if days_left <= TARIFF_WARNING_DAYS and days_left >= 0:
                    notification_key = f"composite_{today}"
                    if notification_key not in self.last_notification_date:
                        self._send_expiry_notification("–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤", days_left, composite_info.get("valid_until"))
                        self.last_notification_date[notification_key] = today
                
                elif days_left < 0:
                    # –¢–∞—Ä–∏—Ñ—ã –∏—Å—Ç–µ–∫–ª–∏
                    notification_key = f"composite_expired_{today}"
                    if notification_key not in self.last_notification_date:
                        self._send_expired_notification("–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤", abs(days_left))
                        self.last_notification_date[notification_key] = today
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞—Ä–∏—Ñ—ã –¥–æ –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫–∞
            novorossiysk_info = expiry_info.get("novorossiysk", {})
            if novorossiysk_info.get("valid_until"):
                days_left = novorossiysk_info.get("days_left", 0)
                
                if days_left <= TARIFF_WARNING_DAYS and days_left >= 0:
                    notification_key = f"novorossiysk_{today}"
                    if notification_key not in self.last_notification_date:
                        self._send_expiry_notification("—Ç–∞—Ä–∏—Ñ–æ–≤ –¥–æ –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫–∞", days_left, novorossiysk_info.get("valid_until"))
                        self.last_notification_date[notification_key] = today
                
                elif days_left < 0:
                    # –¢–∞—Ä–∏—Ñ—ã –∏—Å—Ç–µ–∫–ª–∏
                    notification_key = f"novorossiysk_expired_{today}"
                    if notification_key not in self.last_notification_date:
                        self._send_expired_notification("—Ç–∞—Ä–∏—Ñ–æ–≤ –¥–æ –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫–∞", abs(days_left))
                        self.last_notification_date[notification_key] = today
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            self._cleanup_notification_history()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–æ–≤ —Ç–∞—Ä–∏—Ñ–æ–≤: {e}")
    
    def _send_expiry_notification(self, tariff_type: str, days_left: int, valid_until: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
        try:
            if days_left == 0:
                message = f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n" \
                         f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è {tariff_type} –∏—Å—Ç–µ–∫–∞–µ—Ç –°–ï–ì–û–î–ù–Ø!\n" \
                         f"–î–µ–π—Å—Ç–≤—É—é—Ç –¥–æ: {valid_until}\n\n" \
                         f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ä–æ—á–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã."
            else:
                message = f"‚ö†Ô∏è <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö</b>\n\n" \
                         f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è {tariff_type} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω.\n" \
                         f"–î–µ–π—Å—Ç–≤—É—é—Ç –¥–æ: {valid_until}\n\n" \
                         f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            self.bot.send_message(
                chat_id=MANAGER_CHAT_ID,
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–æ–∫–µ {tariff_type}: {days_left} –¥–Ω–µ–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ä–æ–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤: {e}")
    
    def _send_expired_notification(self, tariff_type: str, days_expired: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö"""
        try:
            message = f"üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!</b>\n\n" \
                     f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è {tariff_type} –∏—Å—Ç–µ–∫ {days_expired} –¥–Ω. –Ω–∞–∑–∞–¥!\n\n" \
                     f"–ë–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –°–†–û–ß–ù–û –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self.bot.send_message(
                chat_id=MANAGER_CHAT_ID,
                text=message,
                parse_mode='HTML'
            )
            
            logger.warning(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {tariff_type} –∏—Å—Ç–µ–∫–ª–∏ {days_expired} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def _cleanup_notification_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            thirty_days_ago = datetime.now().date() - timedelta(days=30)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            keys_to_remove = []
            for key, date in self.last_notification_date.items():
                if date < thirty_days_ago:
                    keys_to_remove.append(key)
            
            for key in keys_to_remove:
                del self.last_notification_date[key]
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    def force_check(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        self._check_tariff_expiry()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
tariff_scheduler = TariffScheduler() 